name: Update live.json (Twitch)

on:
  schedule:
    - cron: "*/2 * * * *"     # toutes les 2 min
  workflow_dispatch: {}        # exÃ©cution manuelle

jobs:
  update-live-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write          # IMPORTANT: autorise le push
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Twitch App Token
        id: twitch_token
        run: |
          RESP=$(curl -s -X POST "https://id.twitch.tv/oauth2/token" \
            -d "client_id=${{ secrets.TWITCH_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.TWITCH_CLIENT_SECRET }}" \
            -d "grant_type=client_credentials")
          echo "$RESP"
          TOKEN=$(echo "$RESP" | jq -r '.access_token')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to get token"; exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Get Twitch User ID
        id: twitch_user
        run: |
          RESP=$(curl -s -H "Client-ID: ${{ secrets.TWITCH_CLIENT_ID }}" \
                      -H "Authorization: Bearer ${{ steps.twitch_token.outputs.token }}" \
                      "https://api.twitch.tv/helix/users?login=${{ secrets.TWITCH_LOGIN }}")
          echo "$RESP"
          USER_ID=$(echo "$RESP" | jq -r '.data[0].id')
          if [ -z "$USER_ID" ] || [ "$USER_ID" = "null" ]; then
            echo "User not found"; exit 1
          fi
          echo "uid=$USER_ID" >> $GITHUB_OUTPUT

      - name: Check Twitch Live
        id: twitch_live
        run: |
          RESP=$(curl -s -H "Client-ID: ${{ secrets.TWITCH_CLIENT_ID }}" \
                      -H "Authorization: Bearer ${{ steps.twitch_token.outputs.token }}" \
                      "https://api.twitch.tv/helix/streams?user_id=${{ steps.twitch_user.outputs.uid }}")
          echo "$RESP"
          LIVE=$(echo "$RESP" | jq -r 'if (.data | length) > 0 and .data[0].type == "live" then "true" else "false" end')
          TITLE=$(echo "$RESP" | jq -r '.data[0].title // empty')
          URL="https://www.twitch.tv/${{ secrets.TWITCH_LOGIN }}"
          echo "live=$LIVE"  >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "url=$URL"     >> $GITHUB_OUTPUT

      - name: Build live.json
        run: |
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat > live.json <<EOF
          {
            "twitch": {
              "live": ${{ steps.twitch_live.outputs.live }},
              "title": ${{
                steps.twitch_live.outputs.title && steps.twitch_live.outputs.title != '' && toJson(steps.twitch_live.outputs.title) || 'null'
              }},
              "url": "${{ steps.twitch_live.outputs.url }}"
            },
            "updated": "$NOW"
          }
          EOF
          echo "---- live.json ----"
          cat live.json
          echo
          echo "Branch: $(git rev-parse --abbrev-ref HEAD)"
          ls -la

      - name: Commit & push live.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add live.json
          git commit -m "Update live.json [skip ci]" || echo "No changes to commit"
          # S'assure qu'on pousse bien sur main
          git push origin HEAD:main
